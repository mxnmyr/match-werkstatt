generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String?  // Auftragsnummer (F-250707-1, etc.)
  title         String
  description   String
  clientId      String
  clientName    String
  deadline      DateTime
  costCenter    String
  priority      String        @default("medium")
  status        String        @default("pending")
  estimatedHours Int
  actualHours   Int
  assignedTo    String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderType     String
  subTasks      Json?
  documents     Document[]
  components    Component[]  // Neue Bauteile-Relation
  revisionHistory  Json? // Kommentare von der Werkstatt an den Kunden
  reworkComments   Json? // Kommentare vom Kunden an die Werkstatt
  confirmationNote String?
  confirmationDate DateTime?
  canEdit          Boolean?      @default(false)
  noteHistory      NoteHistory[]
  networkPath      String?       // Pfad zum Netzwerkordner
  networkFolderCreated Boolean?  @default(false) // Status der Netzwerkordner-Erstellung

  // Materialstatus-Felder
  materialOrderedByWorkshop Boolean? @default(false)
  materialOrderedByClient   Boolean? @default(false)
  materialOrderedByClientConfirmed Boolean? @default(false)
  materialAvailable         Boolean? @default(false)

  // Titelbild als Base64-String (vereinfacht, ohne separate Image-Tabelle)
  titleImage     String? // Base64-encoded image data
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  url        String
  uploadDate DateTime
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @db.ObjectId
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  password    String
  name        String
  role        String   // 'client', 'admin', 'workshop'
  isActive    Boolean  @default(true)
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model NoteHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  notes     String
  createdAt DateTime @default(now())
}

model Component {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @db.ObjectId
  documents   ComponentDocument[]
  createdAt   DateTime @default(now())
}

model ComponentDocument {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  uploadDate  DateTime
  component   Component @relation(fields: [componentId], references: [id])
  componentId String    @db.ObjectId
}

model SystemConfig {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  key         String    @unique
  value       String
  description String?
  updatedAt   DateTime  @default(now())
  updatedBy   String?   // User ID, der die Ã„nderung vorgenommen hat
}
